#This is a script that downloads the .csv file which contains the vulnerabilities from the official exploit db repo in github and searches the vuls in it

import csv,re,os,subprocess
import datetime
import logging
import unicodedata
import wmi

w = wmi.WMI()

pathtospiders = os.path.abspath(os.getcwd()) + "/web_scraping/spiders"

pathtorapid7 = os.path.abspath(os.getcwd()) + "/web_scraping/spiders/rapid7.csv"

pathtoexploits = os.path.abspath(os.getcwd()) + "/web_scraping/spiders/files_exploits.csv"

pathtolog = os.path.abspath(os.getcwd()) + "/web_scraping/spiders/agent.log"

subprocess.call("curl https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv --output files_exploits.csv", shell=True, cwd=pathtospiders)



try:
   for i in w.Win32_Product():
        app = (i.Name)
        if app is not None: 
            app = app.encode('utf-8')   
            with open(pathtoexploits) as f_obj:
                reader = csv.reader(f_obj, delimiter=',')
    
                for line in reader:      #Iterates through the rows files_exploits.csv
                   
                    if (app in line[2]):      #If the string you want to search is in the row
                        logging.basicConfig(filename=pathtolog, filemode='w', format='%(name)s - %(levelname)s - %(message)s')
                        logging.warning('Description:' + ' ' + line[2])
                    #logging.warning('ID:' + ' ' + line[0])
            with open(pathtorapid7) as f_obj:
                reader = csv.reader(f_obj, delimiter=',')
    
                for line in reader:      #Iterates through the rows of your csv

                    if app in line[0] and ('Huawei' not in line[0]) and ('OS X' not in line[0]) and ('IBM' not in line[0]) and ('Sun' not in line[0]) and ('ELSA' not in line[0]) and ('Apple' not in line[0]) and ('Oracle' not in line[0]) and ('Gentoo' not in line[0]) and ('SUSE' not in line[0] and ('Amazon' not in line[0]) and ('Alpine' not in line[0]) and ('RHSA' not in line[0]) and ('Red Hat' not in line[0]) and ('FreeBSD' not in line[0]) and ('AIX' not in line[0]) and ('Moodle' not in line[0]) and ('USN' not in line[0]) and ('DSA' not in line[0]) and ('HP' not in line[0])):       

                        logging.basicConfig(filename=pathtolog, filemode='w', format='%(name)s - %(levelname)s - %(message)s')
                        logging.warning('Description:' + ' ' + line[0]) 
except KeyboardInterrupt:
    pass


	

        
